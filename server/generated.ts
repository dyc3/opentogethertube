/*
 Generated by typeshare 1.7.0
*/

export type ClientId = string;

export type RoomName = string;

export type MonolithId = string;

export interface MsgB2MLoad {
	room: RoomName;
}

export interface MsgB2MJoin {
	room: RoomName;
	client: ClientId;
	token: string;
}

export interface MsgB2MLeave {
	client: ClientId;
}

export interface MsgB2MClientMsg<T> {
	/** The client that sent the message. */
	client_id: ClientId;
	/** The message that was received from the client, verbatim. */
	payload: T;
}

export interface M2BInit {
	/** The port that the monolith is listening for HTTP requests on. */
	port: number;
}

export interface M2BUnloaded {
	name: RoomName;
}

export interface M2BRoomMsg<T> {
	/** The room to send the message to. */
	room: RoomName;
	/** The client to send the message to. If `None`, send to all clients in the room. */
	client_id?: ClientId;
	/** The message to send, verbatim. */
	payload: T;
}

export interface M2BKick {
	client_id: ClientId;
	reason: number;
}

export enum Visibility {
	Public = "public",
	Unlisted = "unlisted",
	Private = "private",
}
